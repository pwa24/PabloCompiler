entry:
	%0not_ = xor %basis7, 1
	%0not_1 = xor %basis5, 1
	%0not_2 = xor %basis3, 1
	%0not_3 = xor %basis2, 1
	%0not_4 = xor %basis1, 1
	%0not_5 = xor %basis0, 1
	%0and_ = and %basis6, %0not_
	%0and_1 = and %basis4, %0not_1
	%0or_ = or %basis2, %basis3
	%0not_6 = xor %0or_, 1
	%0or_1 = or %basis0, %basis1
	%0not_7 = xor %0or_1, 1
	%0and_2 = and %0and_, %0and_1
	%0or_2 = or %0or_, %0or_1
	%0not_8 = xor %0or_2, 1
	%0and_3 = and %0and_2, %0not_8
	%0CC_a = %0and_3
	%0LF = %0CC_a
	%0not_9 = xor %basis6, 1
	%0and_4 = and %basis7, %0not_9
	%0and_5 = and %basis4, %basis5
	%0and_6 = and %0and_4, %0and_5
	%0and_7 = and %0and_6, %0not_8
	%0CC_d = %0and_7
	%0and_8 = and %basis4, %0not_8
	%0xor_ = xor %basis5, %basis6
	%0and_9 = and %0and_8, %0xor_
	%0CC_a_d = %0and_9
	%0 = %0CC_d
	cb %0, ifThen0, ifElse0
ifThen0:
	%0cr1 = shl %0CC_d, 1
	%0and_10 = and %0LF, %0cr1
	%0crlf = %0and_10
	br ifEnd0
ifElse0:
	%1crlf = 0
	br ifEnd0
ifEnd0:
	%1cr1 = phi [%0cr1, ifThen0], [0, ifElse0]
	%1and_10 = phi [%0and_10, ifThen0], [0, ifElse0]
	%2crlf = phi [%0crlf, ifThen0], [%1crlf, ifElse0]
	%0and_11 = and %basis0, %basis1
	%0or_3 = or %basis4, %basis5
	%0or_4 = or %basis6, %basis7
	%0BC_c0_ff = %0and_11
	%0and_21 = and %basis0, %0not_4
	%0BC_80_bf = %0and_21
	%1 = %0BC_c0_ff
	cb %1, ifThen1, ifElse1
ifThen1:
	%0and_12 = and %0not_3, %0and_11
	%0or_5 = or %basis6, %0or_3
	%0or_6 = or %basis3, %0or_5
	%0and_13 = and %0and_12, %0or_6
	%0BC_c2_df = %0and_13
	%0and_14 = and %basis2, %0not_2
	%0and_15 = and %0and_11, %0and_14
	%0BC_e0_ef = %0and_15
	%0not_10 = xor %basis4, 1
	%0and_16 = and %basis2, %basis3
	%0and_17 = and %0and_11, %0and_16
	%0and_18 = and %0not_10, %0and_17
	%0not_11 = xor %0or_4, 1
	%0not_12 = xor %basis5, 1
	%0and_19 = and %basis5, %0or_4
	%0not_13 = xor %0and_19, 1
	%0and_20 = and %0and_18, %0not_13
	%0BC_f0_f4 = %0and_20
	%0u8suffix = %0BC_80_bf
	%2 = %0BC_c2_df
	cb %2, ifThen2, ifElse2
ifThen2:
	%0advance = shl %0BC_c2_df, 1
	%0u8scope22 = %0advance
	%0or_7 = or %basis4, %basis5
	%0not_14 = xor %0or_7, 1
	%0and_22 = and %0and_, %0not_14
	%0and_23 = and %0not_6, %0and_11
	%0and_24 = and %0and_22, %0and_23
	%0BC_c2 = %0and_24
	%0advance1 = shl %0BC_c2, 1
	%0and_25 = and %basis5, %0not_10
	%0and_26 = and %0and_4, %0and_25
	%0and_27 = and %0not_6, %0and_21
	%0and_28 = and %0and_26, %0and_27
	%0BC_85 = %0and_28
	%0and_29 = and %0advance1, %0BC_85
	%0NEL = %0and_29
	br ifEnd2
ifElse2:
	%1u8scope22 = 0
	%1NEL = 0
	br ifEnd2
ifEnd2:
	%1advance = phi [%0advance, ifThen2], [0, ifElse2]
	%2u8scope22 = phi [%0u8scope22, ifThen2], [%1u8scope22, ifElse2]
	%1or_7 = phi [%0or_7, ifThen2], [0, ifElse2]
	%1not_14 = phi [%0not_14, ifThen2], [0, ifElse2]
	%1and_22 = phi [%0and_22, ifThen2], [0, ifElse2]
	%1and_23 = phi [%0and_23, ifThen2], [0, ifElse2]
	%1and_24 = phi [%0and_24, ifThen2], [0, ifElse2]
	%1BC_c2 = phi [%0BC_c2, ifThen2], [0, ifElse2]
	%1advance1 = phi [%0advance1, ifThen2], [0, ifElse2]
	%1and_25 = phi [%0and_25, ifThen2], [0, ifElse2]
	%1and_26 = phi [%0and_26, ifThen2], [0, ifElse2]
	%1and_27 = phi [%0and_27, ifThen2], [0, ifElse2]
	%1and_28 = phi [%0and_28, ifThen2], [0, ifElse2]
	%1BC_85 = phi [%0BC_85, ifThen2], [0, ifElse2]
	%1and_29 = phi [%0and_29, ifThen2], [0, ifElse2]
	%2NEL = phi [%0NEL, ifThen2], [%1NEL, ifElse2]
	%3 = %0BC_e0_ef
	cb %3, ifThen3, ifElse3
ifThen3:
	%0advance2 = shl %0BC_e0_ef, 1
	%0u8scope32 = %0advance2
	%0advance3 = shl %0BC_e0_ef, 2
	%0or_8 = or %0u8scope32, %0advance3
	%0u8scope3X = %0or_8
	%0or_9 = or %basis4, %basis5
	%0not_15 = xor %0or_9, 1
	%0and_30 = and %0and_, %0not_15
	%0and_31 = and %0and_15, %0and_30
	%0BC_e2 = %0and_31
	%0advance4 = shl %0BC_e2, 1
	%0or_10 = or %basis6, %basis7
	%0not_16 = xor %0or_10, 1
	%0or_11 = or %0or_9, %0or_10
	%0not_17 = xor %0or_11, 1
	%0and_32 = and %0not_6, %0and_21
	%0and_33 = and %0not_17, %0and_32
	%0BC_80 = %0and_33
	%0and_34 = and %0advance4, %0BC_80
	%0advance5 = shl %0and_34, 1
	%0and_35 = and %0and_1, %0not_9
	%0and_36 = and %0and_14, %0and_21
	%0and_37 = and %0and_35, %0and_36
	%0BC_a8_a9 = %0and_37
	%0and_38 = and %0advance5, %0BC_a8_a9
	%0LS_PS = %0and_38
	%0and_39 = and %0and_15, %0not_17
	%0BC_e0 = %0and_39
	%0advance6 = shl %0BC_e0, 1
	%0and_40 = and %0not_3, %0and_21
	%0BC_80_9f = %0and_40
	%0and_41 = and %0advance6, %0BC_80_9f
	%0and_42 = and %0and_6, %0and_15
	%0BC_ed = %0and_42
	%0advance7 = shl %0BC_ed, 1
	%0and_43 = and %basis2, %0and_21
	%0BC_a0_bf = %0and_43
	%0and_44 = and %0advance7, %0BC_a0_bf
	%0or_12 = or %0and_41, %0and_44
	%0EX_invalid = %0or_12
	br ifEnd3
ifElse3:
	%1u8scope32 = 0
	%1u8scope3X = 0
	%1LS_PS = 0
	%1EX_invalid = 0
	br ifEnd3
ifEnd3:
	%1advance2 = phi [%0advance2, ifThen3], [0, ifElse3]
	%2u8scope32 = phi [%0u8scope32, ifThen3], [%1u8scope32, ifElse3]
	%1advance3 = phi [%0advance3, ifThen3], [0, ifElse3]
	%1or_8 = phi [%0or_8, ifThen3], [0, ifElse3]
	%2u8scope3X = phi [%0u8scope3X, ifThen3], [%1u8scope3X, ifElse3]
	%1or_9 = phi [%0or_9, ifThen3], [0, ifElse3]
	%1not_15 = phi [%0not_15, ifThen3], [0, ifElse3]
	%1and_30 = phi [%0and_30, ifThen3], [0, ifElse3]
	%1and_31 = phi [%0and_31, ifThen3], [0, ifElse3]
	%1BC_e2 = phi [%0BC_e2, ifThen3], [0, ifElse3]
	%1advance4 = phi [%0advance4, ifThen3], [0, ifElse3]
	%1or_10 = phi [%0or_10, ifThen3], [0, ifElse3]
	%1not_16 = phi [%0not_16, ifThen3], [0, ifElse3]
	%1or_11 = phi [%0or_11, ifThen3], [0, ifElse3]
	%1not_17 = phi [%0not_17, ifThen3], [0, ifElse3]
	%1and_32 = phi [%0and_32, ifThen3], [0, ifElse3]
	%1and_33 = phi [%0and_33, ifThen3], [0, ifElse3]
	%1BC_80 = phi [%0BC_80, ifThen3], [0, ifElse3]
	%1and_34 = phi [%0and_34, ifThen3], [0, ifElse3]
	%1advance5 = phi [%0advance5, ifThen3], [0, ifElse3]
	%1and_35 = phi [%0and_35, ifThen3], [0, ifElse3]
	%1and_36 = phi [%0and_36, ifThen3], [0, ifElse3]
	%1and_37 = phi [%0and_37, ifThen3], [0, ifElse3]
	%1BC_a8_a9 = phi [%0BC_a8_a9, ifThen3], [0, ifElse3]
	%1and_38 = phi [%0and_38, ifThen3], [0, ifElse3]
	%2LS_PS = phi [%0LS_PS, ifThen3], [%1LS_PS, ifElse3]
	%1and_39 = phi [%0and_39, ifThen3], [0, ifElse3]
	%1BC_e0 = phi [%0BC_e0, ifThen3], [0, ifElse3]
	%1advance6 = phi [%0advance6, ifThen3], [0, ifElse3]
	%1and_40 = phi [%0and_40, ifThen3], [0, ifElse3]
	%1BC_80_9f = phi [%0BC_80_9f, ifThen3], [0, ifElse3]
	%1and_41 = phi [%0and_41, ifThen3], [0, ifElse3]
	%1and_42 = phi [%0and_42, ifThen3], [0, ifElse3]
	%1BC_ed = phi [%0BC_ed, ifThen3], [0, ifElse3]
	%1advance7 = phi [%0advance7, ifThen3], [0, ifElse3]
	%1and_43 = phi [%0and_43, ifThen3], [0, ifElse3]
	%1BC_a0_bf = phi [%0BC_a0_bf, ifThen3], [0, ifElse3]
	%1and_44 = phi [%0and_44, ifThen3], [0, ifElse3]
	%1or_12 = phi [%0or_12, ifThen3], [0, ifElse3]
	%2EX_invalid = phi [%0EX_invalid, ifThen3], [%1EX_invalid, ifElse3]
	%4 = %0BC_f0_f4
	cb %4, ifThen4, ifElse4
ifThen4:
	%0u8scope42 = shl %0BC_f0_f4, 1
	%0u8scope43 = shl %0u8scope42, 1
	%0u8scope44 = shl %0u8scope43, 1
	%0or_13 = or %0u8scope42, %0u8scope43
	%0u8scope4nonfinal = %0or_13
	%0or_14 = or %0u8scope44, %0u8scope4nonfinal
	%0u8scope4X = %0or_14
	%0or_15 = or %basis6, %basis7
	%0not_18 = xor %0or_15, 1
	%0or_16 = or %basis4, %basis5
	%0not_19 = xor %0or_16, 1
	%0or_17 = or %0or_15, %0or_16
	%0not_20 = xor %0or_17, 1
	%0and_45 = and %0and_17, %0not_20
	%0BC_f0 = %0and_45
	%0advance8 = shl %0BC_f0, 1
	%0and_46 = and %0not_6, %0and_21
	%0BC_80_8f = %0and_46
	%0and_47 = and %0advance8, %0BC_80_8f
	%0and_48 = and %basis5, %0not_10
	%0and_49 = and %0not_18, %0and_48
	%0and_50 = and %0and_17, %0and_49
	%0BC_f4 = %0and_50
	%0advance9 = shl %0BC_f4, 1
	%0or_18 = or %basis2, %basis3
	%0and_51 = and %0and_21, %0or_18
	%0BC_90_bf = %0and_51
	%0and_52 = and %0advance9, %0BC_90_bf
	%0or_19 = or %0and_47, %0and_52
	%0FX_invalid = %0or_19
	br ifEnd4
ifElse4:
	%1u8scope4nonfinal = 0
	%1u8scope4X = 0
	%1FX_invalid = 0
	br ifEnd4
ifEnd4:
	%1u8scope42 = phi [%0u8scope42, ifThen4], [0, ifElse4]
	%1u8scope43 = phi [%0u8scope43, ifThen4], [0, ifElse4]
	%1u8scope44 = phi [%0u8scope44, ifThen4], [0, ifElse4]
	%1or_13 = phi [%0or_13, ifThen4], [0, ifElse4]
	%2u8scope4nonfinal = phi [%0u8scope4nonfinal, ifThen4], [%1u8scope4nonfinal, ifElse4]
	%1or_14 = phi [%0or_14, ifThen4], [0, ifElse4]
	%2u8scope4X = phi [%0u8scope4X, ifThen4], [%1u8scope4X, ifElse4]
	%1or_15 = phi [%0or_15, ifThen4], [0, ifElse4]
	%1not_18 = phi [%0not_18, ifThen4], [0, ifElse4]
	%1or_16 = phi [%0or_16, ifThen4], [0, ifElse4]
	%1not_19 = phi [%0not_19, ifThen4], [0, ifElse4]
	%1or_17 = phi [%0or_17, ifThen4], [0, ifElse4]
	%1not_20 = phi [%0not_20, ifThen4], [0, ifElse4]
	%1and_45 = phi [%0and_45, ifThen4], [0, ifElse4]
	%1BC_f0 = phi [%0BC_f0, ifThen4], [0, ifElse4]
	%1advance8 = phi [%0advance8, ifThen4], [0, ifElse4]
	%1and_46 = phi [%0and_46, ifThen4], [0, ifElse4]
	%1BC_80_8f = phi [%0BC_80_8f, ifThen4], [0, ifElse4]
	%1and_47 = phi [%0and_47, ifThen4], [0, ifElse4]
	%1and_48 = phi [%0and_48, ifThen4], [0, ifElse4]
	%1and_49 = phi [%0and_49, ifThen4], [0, ifElse4]
	%1and_50 = phi [%0and_50, ifThen4], [0, ifElse4]
	%1BC_f4 = phi [%0BC_f4, ifThen4], [0, ifElse4]
	%1advance9 = phi [%0advance9, ifThen4], [0, ifElse4]
	%1or_18 = phi [%0or_18, ifThen4], [0, ifElse4]
	%1and_51 = phi [%0and_51, ifThen4], [0, ifElse4]
	%1BC_90_bf = phi [%0BC_90_bf, ifThen4], [0, ifElse4]
	%1and_52 = phi [%0and_52, ifThen4], [0, ifElse4]
	%1or_19 = phi [%0or_19, ifThen4], [0, ifElse4]
	%2FX_invalid = phi [%0FX_invalid, ifThen4], [%1FX_invalid, ifElse4]
	%0or_20 = or %2u8scope3X, %2u8scope4X
	%0or_21 = or %2u8scope22, %0or_20
	%0or_22 = or %0BC_c2_df, %0BC_e0_ef
	%0or_23 = or %0BC_f0_f4, %0or_22
	%0xor_1 = xor %0u8suffix, %0or_21
	%0or_24 = or %2EX_invalid, %2FX_invalid
	%0xor_2 = xor %0BC_c0_ff, %0or_23
	%0or_25 = or %0xor_1, %0or_24
	%0or_26 = or %0xor_2, %0or_25
	%0u8invalid = %0or_26
	%0not_21 = xor %0u8invalid, 1
	%0u8valid = %0not_21
	%0and_53 = and %0BC_c0_ff, %0u8valid
	%0valid_pfx = %0and_53
	%0or_27 = or %0BC_c0_ff, %2u8scope32
	%0or_28 = or %2u8scope4nonfinal, %0or_27
	%0and_54 = and %0u8valid, %0or_28
	%0nonfinal = %0and_54
	%0or_29 = or %2NEL, %2LS_PS
	%0NEL_LS_PS = %0or_29
	br ifEnd1
ifElse1:
	%1u8invalid = 0
	%1valid_pfx = 0
	%1nonfinal = 0
	%1NEL_LS_PS = 0
	br ifEnd1
ifEnd1:
	%1or_20 = phi [%0or_20, ifEnd4], [0, ifElse1]
	%1or_21 = phi [%0or_21, ifEnd4], [0, ifElse1]
	%1or_22 = phi [%0or_22, ifEnd4], [0, ifElse1]
	%1or_23 = phi [%0or_23, ifEnd4], [0, ifElse1]
	%1xor_1 = phi [%0xor_1, ifEnd4], [0, ifElse1]
	%1or_24 = phi [%0or_24, ifEnd4], [0, ifElse1]
	%1xor_2 = phi [%0xor_2, ifEnd4], [0, ifElse1]
	%1or_25 = phi [%0or_25, ifEnd4], [0, ifElse1]
	%1or_26 = phi [%0or_26, ifEnd4], [0, ifElse1]
	%2u8invalid = phi [%0u8invalid, ifEnd4], [%1u8invalid, ifElse1]
	%1not_21 = phi [%0not_21, ifEnd4], [0, ifElse1]
	%1u8valid = phi [%0u8valid, ifEnd4], [0, ifElse1]
	%1and_53 = phi [%0and_53, ifEnd4], [0, ifElse1]
	%2valid_pfx = phi [%0valid_pfx, ifEnd4], [%1valid_pfx, ifElse1]
	%1or_27 = phi [%0or_27, ifEnd4], [0, ifElse1]
	%1or_28 = phi [%0or_28, ifEnd4], [0, ifElse1]
	%1and_54 = phi [%0and_54, ifEnd4], [0, ifElse1]
	%2nonfinal = phi [%0nonfinal, ifEnd4], [%1nonfinal, ifElse1]
	%1or_29 = phi [%0or_29, ifEnd4], [0, ifElse1]
	%2NEL_LS_PS = phi [%0NEL_LS_PS, ifEnd4], [%1NEL_LS_PS, ifElse1]
	%0or_30 = or %0CC_a_d, %2NEL_LS_PS
	%0or_31 = or %basis2, %basis3
	%0CC_0_7f = %0not_5
	%0not_22 = xor %2u8invalid, 1
	%0and_55 = and %0CC_0_7f, %0not_22
	%0initial = or %2valid_pfx, %0and_55
	%0or_32 = or %2u8invalid, %2nonfinal
	%0final = xor %0or_32, 1
	%0not_23 = xor %2crlf, 1
	%0and_56 = and %0or_30, %0not_23
	%0not_24 = xor %0and_56, 1
	%0and_57 = and %0and_56, %0not_23
	%0lf = %0and_57
	%0BC_80_bf1 = %0and_21
	%0not_25 = xor %basis4, 1
	%0or_33 = or %basis6, %basis7
	%0not_26 = xor %0or_33, 1
	%0or_34 = or %basis4, %basis5
	%0not_27 = xor %0or_34, 1
	%0and_58 = and %basis2, %0not_2
	%0or_35 = or %0or_33, %0or_34
	%0not_28 = xor %0or_35, 1
	%0and_59 = and %0and_58, %0not_7
	%0and_60 = and %0not_28, %0and_59
	%0CC_20 = %0and_60
	%0and_61 = and %basis1, %0not_5
	%0and_62 = and %0and_4, %0not_27
	%0and_63 = and %0and_58, %0and_61
	%0and_64 = and %0and_62, %0and_63
	%0CC_61 = %0and_64
	%0and_65 = and %0and_, %0not_27
	%0and_66 = and %0and_63, %0and_65
	%0CC_62 = %0and_66
	%0and_67 = and %basis5, %0not_25
	%0and_68 = and %0and_63, %0and_67
	%0not_29 = xor %basis6, 1
	%0and_69 = and %basis6, %basis7
	%0not_30 = xor %0and_69, 1
	%0and_70 = and %0and_68, %0not_30
	%0CC_64_66 = %0and_70
	%0m = and %0CC_20, %0not_24
	%0and_72 = and %0CC_61, %0not_24
	%0and_73 = and %0CC_62, %0not_24
	%0and_74 = and %0CC_64_66, %0not_24
	%0adv = shl %0m, 1
	%0test = %0adv
	%0pending = %0adv
	%0accum = %0adv
	br wCond5
wBody5:
	%0m1 = and %0and_72, %0pending
	%0adv1 = shl %0m1, 1
	%0m2 = and %0and_73, %0adv1
	%0m3 = and %0and_74, %0pending
	%0alt = or %0m2, %0m3
	%0adv2 = shl %0alt, 1
	%0not_31 = xor %0accum, 1
	%0and_75 = and %0adv2, %0not_31
	%1pending = %0and_75
	%0or_36 = or %0accum, %0adv2
	%1accum = %0or_36
	%1test = %1pending
	br wCond5
wCond5:
	%1or_30 = phi [%0or_30, ifEnd1], [0, wBody5]
	%1or_31 = phi [%0or_31, ifEnd1], [0, wBody5]
	%1CC_0_7f = phi [%0CC_0_7f, ifEnd1], [0, wBody5]
	%1not_22 = phi [%0not_22, ifEnd1], [0, wBody5]
	%1and_55 = phi [%0and_55, ifEnd1], [0, wBody5]
	%1initial = phi [%0initial, ifEnd1], [0, wBody5]
	%1or_32 = phi [%0or_32, ifEnd1], [0, wBody5]
	%1final = phi [%0final, ifEnd1], [0, wBody5]
	%1not_23 = phi [%0not_23, ifEnd1], [0, wBody5]
	%1and_56 = phi [%0and_56, ifEnd1], [0, wBody5]
	%1not_24 = phi [%0not_24, ifEnd1], [0, wBody5]
	%1and_57 = phi [%0and_57, ifEnd1], [0, wBody5]
	%1lf = phi [%0lf, ifEnd1], [0, wBody5]
	%1BC_80_bf1 = phi [%0BC_80_bf1, ifEnd1], [0, wBody5]
	%1not_25 = phi [%0not_25, ifEnd1], [0, wBody5]
	%1or_33 = phi [%0or_33, ifEnd1], [0, wBody5]
	%1not_26 = phi [%0not_26, ifEnd1], [0, wBody5]
	%1or_34 = phi [%0or_34, ifEnd1], [0, wBody5]
	%1not_27 = phi [%0not_27, ifEnd1], [0, wBody5]
	%1and_58 = phi [%0and_58, ifEnd1], [0, wBody5]
	%1or_35 = phi [%0or_35, ifEnd1], [0, wBody5]
	%1not_28 = phi [%0not_28, ifEnd1], [0, wBody5]
	%1and_59 = phi [%0and_59, ifEnd1], [0, wBody5]
	%1and_60 = phi [%0and_60, ifEnd1], [0, wBody5]
	%1CC_20 = phi [%0CC_20, ifEnd1], [0, wBody5]
	%1and_61 = phi [%0and_61, ifEnd1], [0, wBody5]
	%1and_62 = phi [%0and_62, ifEnd1], [0, wBody5]
	%1and_63 = phi [%0and_63, ifEnd1], [0, wBody5]
	%1and_64 = phi [%0and_64, ifEnd1], [0, wBody5]
	%1CC_61 = phi [%0CC_61, ifEnd1], [0, wBody5]
	%1and_65 = phi [%0and_65, ifEnd1], [0, wBody5]
	%1and_66 = phi [%0and_66, ifEnd1], [0, wBody5]
	%1CC_62 = phi [%0CC_62, ifEnd1], [0, wBody5]
	%1and_67 = phi [%0and_67, ifEnd1], [0, wBody5]
	%1and_68 = phi [%0and_68, ifEnd1], [0, wBody5]
	%1not_29 = phi [%0not_29, ifEnd1], [0, wBody5]
	%1and_69 = phi [%0and_69, ifEnd1], [0, wBody5]
	%1not_30 = phi [%0not_30, ifEnd1], [0, wBody5]
	%1and_70 = phi [%0and_70, ifEnd1], [0, wBody5]
	%1CC_64_66 = phi [%0CC_64_66, ifEnd1], [0, wBody5]
	%1m = phi [%0m, ifEnd1], [0, wBody5]
	%1and_72 = phi [%0and_72, ifEnd1], [0, wBody5]
	%1and_73 = phi [%0and_73, ifEnd1], [0, wBody5]
	%1and_74 = phi [%0and_74, ifEnd1], [0, wBody5]
	%1adv = phi [%0adv, ifEnd1], [0, wBody5]
	%2test = phi [%0test, ifEnd1], [%1test, wBody5]
	%2pending = phi [%0pending, ifEnd1], [%1pending, wBody5]
	%2accum = phi [%0accum, ifEnd1], [%1accum, wBody5]
	%1m1 = phi [0, ifEnd1], [%0m1, wBody5]
	%1adv1 = phi [0, ifEnd1], [%0adv1, wBody5]
	%1m2 = phi [0, ifEnd1], [%0m2, wBody5]
	%1m3 = phi [0, ifEnd1], [%0m3, wBody5]
	%1alt = phi [0, ifEnd1], [%0alt, wBody5]
	%1adv2 = phi [0, ifEnd1], [%0adv2, wBody5]
	%1not_31 = phi [0, ifEnd1], [%0not_31, wBody5]
	%1and_75 = phi [0, ifEnd1], [%0and_75, wBody5]
	%1or_36 = phi [0, ifEnd1], [%0or_36, wBody5]
	%5 = %2test
	cb %5, wBody5, wEnd5
wEnd5:
	%0unbounded = %2accum
	%0m4 = and %1m, %0unbounded
	%6 = %0m4
	%7 = %1not_24
	%8 = and %6, %7
	%9 = add %8, %7
	%10 = xor %9, %7
	%0matchstar = or %10, %6
	%0and_76 = and %1and_56, %0matchstar
	%0matches = %0and_76
	ret
